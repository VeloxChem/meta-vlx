name: Deploy C++ packages

on:
  workflow_dispatch:
    inputs:
      recipe:
        description: 'Which recipe to build'
        required: true
      url:
        description: 'The URL of the tarball to download'
        required: true
      sha256:
        description: 'The SHA256 of the tarball'
        required: true
      version:
        description: 'Version of the conda package'
        required: true
      build:
        description: 'Build number of the conda package'
        required: true
      channel:
        description: 'The anaconda.org channel'
        required: true
      label:
        description: 'Label of the conda package'
        required: true
      patch:
        description: 'Patch to apply'
        required: true

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Deploy to Anaconda.org
    # skip multipsi builds on windows
    if: !startsWith(matrix.os, 'windows') || ${{ github.event.inputs.recipe != 'multipsi' }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        mpi: [msmpi, mpich, openmpi]
        python: [3.7, 3.8, 3.9, '3.10']
        exclude:
          - os: macos-latest
            mpi: msmpi
          - os: ubuntu-latest
            mpi: msmpi
          - os: windows-latest
            mpi: mpich
          - os: windows-latest
            mpi: openmpi

    steps:
      - uses: actions/checkout@v3.1.0

      - name: Build summary
        run: |
          echo "Build triggered with the following parameters"

          echo " > Recipe for package: ${{ github.event.inputs.recipe }}"
          echo " > Conda package version: ${{ github.event.inputs.version }}"
          echo " > Conda package channel: ${{ github.event.inputs.channel }}"
          echo " > Conda package label: ${{ github.event.inputs.label }}"
          echo " > OS, Python version, MPI implementation: ${{ matrix.os }}, ${{ matrix.python }}, ${{ matrix.mpi }}"

      - name: Get tarball from GitLab, verify sha256 checksum, and unpack it
        env:
          GITLAB_PAT: ${{ secrets.GITLAB_PAT }}
        run: |
          # write checksum to file
          echo ">>> Write $GITHUB_WORKSPACE/${{ github.event.inputs.recipe }}.tar.bz2.sha256"
          printf '${{ github.event.inputs.sha256 }}  ${{ github.event.inputs.recipe }}.tar.bz2' > $GITHUB_WORKSPACE/${{ github.event.inputs.recipe }}.tar.bz2.sha256
          # download tarball
          echo ">>> Download ${{ github.event.inputs.recipe }}.tar.bz2"
          curl --location \
               --header "PRIVATE-TOKEN: $GITLAB_PAT" \
               "${{ github.event.inputs.url }}" \
               --output ${{ github.event.inputs.recipe }}.tar.bz2
          # verify checksum
          echo ">>> Verify SHA256 checksum"
          sha256sum --strict --check ${{ github.event.inputs.recipe }}.tar.bz2.sha256
          # untar
          echo ">>> Untar archive"
          tar xvf ${{ github.event.inputs.recipe }}.tar.bz2

      - name: Write patch to conda-recipes/${{ github.event.inputs.recipe }}/patches
        run: |
          echo ">>> Create folder for patches"
          mkdir -p $GITHUB_WORKSPACE/conda-recipes/${{ github.event.inputs.recipe }}/patches
          echo ">>> Write patch to $GITHUB_WORKSPACE/conda-recipes/${{ github.event.inputs.recipe }}/patches/version.patch"
          printf '${{ github.event.inputs.patch }}' > $GITHUB_WORKSPACE/conda-recipes/${{ github.event.inputs.recipe }}/patches/version.patch
          echo ">>> Show generated patch"
          cat $GITHUB_WORKSPACE/conda-recipes/${{ github.event.inputs.recipe }}/patches/version.patch

      - name: Install macOS SDK
        if: contains(matrix.os, 'macos')
        working-directory: /Users/runner
        run: |
          curl -fsSL https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.10.sdk.tar.xz | tar -xJ

      - name: Cache conda
        uses: actions/cache@v3.0.11
        env:
          # Increase this value to reset cache if .github/deploy.yml has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ matrix.os }}-${{ matrix.python }}-${{ matrix.mpi }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('.github/deploy.yml') }}

      - uses: conda-incubator/setup-miniconda@v2.1.1
        timeout-minutes: 30
        with:
          auto-update-conda: true
          auto-activate-base: false
          activate-environment: deploy
          environment-file: .github/deploy.yml
          python-version: ${{ matrix.python }}
          use-mamba: true
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!

      - name: Configure meta.yaml.in
        run: |
          python $GITHUB_WORKSPACE/.github/search-replace.py \
                 --replace \
                 "@_version_@=${{ github.event.inputs.version }}" \
                 "@_build_@=${{ github.event.inputs.build }}" \
                --file \
                $GITHUB_WORKSPACE/conda-recipes/${{ github.event.inputs.recipe }}/meta.yaml

      - name: Build and upload ${{ github.event.inputs.recipe }} for triplet ${{ matrix.os }}, Python ${{ matrix.python }}, and ${{ matrix.mpi }}
        id: condabuild
        timeout-minutes: 90
        continue-on-error: true
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          cd $GITHUB_WORKSPACE/conda-recipes
          conda build \
                --variants "{'python': ['${{ matrix.python }}'], 'mpi': ['${{ matrix.mpi }}']}" \
                --token $ANACONDA_TOKEN \
                --user ${{ github.event.inputs.channel }} \
                --label ${{ github.event.inputs.label }} \
                --verify \
                -c veloxchem/label/main \
                -c conda-forge \
                ${{ github.event.inputs.recipe }}

      - name: Clean up source code
        run: |
          rm ${{ github.event.inputs.recipe }}.tar.bz2
          rm ${{ github.event.inputs.recipe }}.tar.bz2.sha256
          rm -rf ${{ github.event.inputs.recipe }}

      - name: Write deployment summary of ${{ github.event.inputs.recipe }} for ${{ matrix.os }}, Python ${{ matrix.python }}, and ${{ matrix.mpi }}
        run: |
          echo '{ "os": "${{ matrix.os }}", "python": "${{ matrix.python }}", "mpi": "${{ matrix.mpi }}", "outcome": "${{ steps.condabuild.outcome }}" }' | jq -c '.' | tee summary.json

      - name: Archive deployment summary of ${{ github.event.inputs.recipe }} for ${{ matrix.os }}, Python ${{ matrix.python }}, and ${{ matrix.mpi }}
        uses: actions/upload-artifact@v3
        with:
          path: summary.json
          name: build_summary-${{ matrix.os }}_${{ matrix.python }}_${{ matrix.mpi }}
          retention-days: 1

      - name: Send notification for failures
        if: steps.condabuild.outcome != 'success'
        uses: dawidd6/action-send-mail@v3.7.0
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: "${{ github.event.inputs.recipe }}: UNSUCCESSFUL Conda deployment for ${{ matrix.os }}, Python ${{ matrix.python }}, and ${{ matrix.mpi }}"
          to: roberto@algorithmiq.fi,panor@kth.se,rinkevic@kth.se,delcey@kth.se,lxin@kth.se
          from: MinazoBot
          body: |
            Greetings!
            The deployment DID NOT succeed for a Conda package with the following build parameters:
              > Recipe for package: ${{ github.event.inputs.recipe }}
              > Conda package version: ${{ github.event.inputs.version }}
              > Conda package build number: ${{ github.event.inputs.build }}
              > Conda package channel: ${{ github.event.inputs.channel }}
              > Conda package label: ${{ github.event.inputs.label }}
              > OS, Python version, MPI implementation: ${{ matrix.os }}, ${{ matrix.python }}, ${{ matrix.mpi }}

            Find the build logs here:
              > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Best regards,
              MinazoBot

  summary-email:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    name: Summary of deployment to Anaconda.org for ${{ github.event.inputs.recipe }}
    needs: build

    steps:
      - name: Download all build summaries
        uses: actions/download-artifact@v3
        with:
          path: build_summaries

      - name: Collate JSON files with build summaries
        id: collate
        working-directory: build_summaries
        run: |

          success_msg=""
          failure_msg=""

          for dir in "$PWD"/*/
          do
            echo "Reading JSON file: ${dir%*/}/summary.json"
            part="$(cat "${dir}/summary.json")"
            echo "Extract data from ${part}"

            os="$(echo ${part} | jq -r '.os')"
            echo "os ${os}"

            python="$(echo ${part} | jq -r '.python')"
            echo "python ${python}"

            mpi="$(echo ${part} | jq -r '.mpi')"
            echo "mpi ${mpi}"

            outcome="$(echo ${part} | jq -r '.outcome')"
            echo "outcome ${outcome}"

            tmp="  - OS: ${os}, Python: ${python}, MPI: ${mpi}<br/>"

            if [ "${outcome}" == "success" ]; then
              success_msg+="${tmp}"
            else
              failure_msg+="${tmp}"
            fi
          done

          echo "SUCCESS=${success_msg}" >> $GITHUB_OUTPUT
          echo "FAILURE=${failure_msg}" >> $GITHUB_OUTPUT

      - name: Send notification
        uses: dawidd6/action-send-mail@v3.7.0
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: "${{ github.event.inputs.recipe }}: summary of deployments to Anaconda.org"
          to: roberto@algorithmiq.fi,panor@kth.se,rinkevic@kth.se,delcey@kth.se,lxin@kth.se
          from: MinazoBot
          html_body: |
            Greetings!<br/><br/>

            Deployments to Anaconda.org succeeded for:<br/><br/>

            ${{ steps.collate.outputs.SUCCESS }}<br/>

            You can install with:<br/><br/>

              $ conda install ${{ github.event.inputs.recipe }}=${{ github.event.inputs.version }}=*_${{ github.event.inputs.build }} -c ${{ github.event.inputs.channel }}/label/${{ github.event.inputs.label }} -c conda-forge<br/><br/>

            Deployments to Anaconda.org failed for:<br/><br/>

            ${{ steps.collate.outputs.FAILURE }}<br/>

            Best regards,<br/>
              MinazoBot
