name: Deploy VeloxChem

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch or commit of VeloxChem'
        required: true
      label:
        description: 'Label of the conda package'
        required: true
      build:
        description: 'Build number of the conda package (optional)'
        required: false
      pyversions:
        description: 'Python versions (optional)'
        required: false
      ostypes:
        description: 'Operating systems (optional)'
        required: false

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare-build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.MATRIX }}

    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        run: |
          if [ -z "${{ inputs.pyversions }}" ]; then
            PY_VERSIONS="3.11,3.12"
          else
            PY_VERSIONS="${{ inputs.pyversions }}"
          fi

          if [ -z "${{ inputs.ostypes }}" ]; then
            OS_TYPES="linux,osx-arm,osx,win"
          else
            OS_TYPES="${{ inputs.ostypes }}"
          fi

          python $GITHUB_WORKSPACE/.github/generate-matrix.py $PY_VERSIONS $OS_TYPES > matrix.json

          echo "Build matrix for veloxchem"
          echo "MATRIX={\"include\": $(cat matrix.json)}"

          echo "MATRIX={\"include\": $(cat matrix.json)}" >> $GITHUB_OUTPUT

  build:
    name: Deploy to Anaconda.org
    needs: prepare-build-matrix
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix: ${{ fromJson(needs.prepare-build-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Build summary
        run: |
          echo "Build triggered with the following parameters"

          echo " > Recipe for package: veloxchem (${{ inputs.branch }})"
          echo " > Conda package channel: veloxchem"
          echo " > Conda package label: ${{ inputs.label }}"
          echo " > OS, Python version, MPI implementation: ${{ matrix.os }}, ${{ matrix.python }}, ${{ matrix.mpi }}"

      - name: Clone veloxchem and get commit hash
        run: |
          echo ">>> Clone veloxchem (${{ inputs.branch }})"
          git config --global --add safe.directory $PWD
          git clone -b ${{ inputs.branch }} https://github.com/VeloxChem/VeloxChem.git veloxchem
          VLXHASH=$(git -C veloxchem rev-parse HEAD)
          echo "Commit hash is $VLXHASH"
          echo "" >> veloxchem/src/pymodule/__init__.py
          echo "__commit__ = '${VLXHASH}'" >> veloxchem/src/pymodule/__init__.py

      - name: Install macOS SDK
        if: startsWith(matrix.os, 'macos')
        working-directory: /Users/runner
        run: |
          curl -fsSL https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.0.sdk.tar.xz | tar -xJ

      - uses: conda-incubator/setup-miniconda@v3
        timeout-minutes: 30
        with:
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: false
          activate-environment: deploy
          environment-file: .github/deploy.yml
          python-version: ${{ matrix.python }}
          use-mamba: true

      - name: Configure meta.yaml.in
        run: |
          VERSION_LINE=$(grep '__version__' veloxchem/src/pymodule/__init__.py)
          VLX_VERSION=$(echo "$VERSION_LINE" | tr "'" '"' | cut -d '"' -f2)

          if [ -z "${{ inputs.build }}" ]; then
            YEAR=$(date +"%Y")
            WEEK=$(date +"%V")
            BUILD_NUMBER=$((($YEAR - 2022)*53 + 22 + 10#$WEEK))
          else
            BUILD_NUMBER="${{ inputs.build }}"
          fi

          echo "VeloxChem version is $VLX_VERSION"
          echo "Build number of the conda package is $BUILD_NUMBER"

          python $GITHUB_WORKSPACE/.github/search-replace.py \
                 --replace \
                 "@_version_@=$VLX_VERSION" \
                 "@_build_@=$BUILD_NUMBER" \
                 --file \
                 $GITHUB_WORKSPACE/conda-recipes/veloxchem/meta.yaml

      - name: Build and upload veloxchem for triplet ${{ matrix.os }}, Python ${{ matrix.python }}, and ${{ matrix.mpi }}
        id: condabuild
        timeout-minutes: 180
        continue-on-error: true
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          cd $GITHUB_WORKSPACE/conda-recipes
          conda build \
                --variants "{'python': ['${{ matrix.python }}'], 'mpi': ['${{ matrix.mpi }}']}" \
                --token $ANACONDA_TOKEN \
                --user veloxchem \
                --label ${{ inputs.label }} \
                --verify \
                -c veloxchem/label/main \
                -c conda-forge \
                veloxchem

      - name: Clean up source code
        run: |
          rm -rf veloxchem

      - name: Write deployment summary of veloxchem for ${{ matrix.os }}, Python ${{ matrix.python }}, and ${{ matrix.mpi }}
        run: |
          echo '{ "os": "${{ matrix.os }}", "python": "${{ matrix.python }}", "mpi": "${{ matrix.mpi }}", "outcome": "${{ steps.condabuild.outcome }}" }' | jq -c '.' | tee summary.json

      - name: Archive deployment summary of veloxchem for ${{ matrix.os }}, Python ${{ matrix.python }}, and ${{ matrix.mpi }}
        uses: actions/upload-artifact@v4
        with:
          path: summary.json
          name: build_summary-${{ matrix.os }}_${{ matrix.python }}_${{ matrix.mpi }}
          retention-days: 1

  summary-email:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    name: Summary of deployment to Anaconda.org for veloxchem
    needs: build

    steps:
      - name: Download all build summaries
        uses: actions/download-artifact@v4
        with:
          path: build_summaries

      - name: Collate JSON files with build summaries
        id: collate
        working-directory: build_summaries
        run: |

          success_msg=""
          failure_msg=""

          for dir in "$PWD"/*/
          do
            echo "Reading JSON file: ${dir%*/}/summary.json"
            part="$(cat "${dir}/summary.json")"
            echo "Extract data from ${part}"

            os="$(echo ${part} | jq -r '.os')"
            echo "os ${os}"

            python="$(echo ${part} | jq -r '.python')"
            echo "python ${python}"

            mpi="$(echo ${part} | jq -r '.mpi')"
            echo "mpi ${mpi}"

            outcome="$(echo ${part} | jq -r '.outcome')"
            echo "outcome ${outcome}"

            tmp="  - OS: ${os}, Python: ${python}, MPI: ${mpi}<br/>"

            if [ "${outcome}" == "success" ]; then
              success_msg+="${tmp}"
            else
              failure_msg+="${tmp}"
            fi
          done

          echo "SUCCESS=${success_msg}" >> $GITHUB_OUTPUT
          echo "FAILURE=${failure_msg}" >> $GITHUB_OUTPUT
